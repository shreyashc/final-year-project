import StartupItem from "../components/StartupItem";
import { Center, Container, Loader, Text, SimpleGrid } from "@mantine/core";
import { useEffect, useState } from "react";
import { apiClient } from "../api/client";
import { useNavigate } from "react-router-dom";

const Startups = () => {
  const [startups, setStartups] = useState<StartupT[]>([]);
  const [myUpvotes, setMyUpvotes] = useState<number[]>([]);
  const [error, setError] = useState(false);
  const [loading, setLoading] = useState(false);
  const nav = useNavigate();

  useEffect(() => {
    setLoading(true);
    apiClient
      .get<StartupT[]>("startups")
      .then((res) => {
        setStartups(res.data);
      })
      .catch((err) => {
        console.log(err);
        setError(true);
      })
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    apiClient
      .get<number[]>("upvote/my-upvotes")
      .then((res) => {
        setMyUpvotes(res.data);
      })
      .catch((err) => {
        console.log(err);
      })
      .finally(() => setLoading(false));
  }, []);

  const up = (sid: number) => {
    setStartups((prev) =>
      prev.map((itm) => {
        if (itm.id === sid)
          return {
            ...itm,
            upvalue: itm.upvalue + 1,
          };
        return itm;
      })
    );
    setMyUpvotes((prev) => [...prev, sid]);
  };
  const upRemove = (sid: number) => {
    setMyUpvotes((prev) => prev.filter((id) => id !== sid));
    setStartups((prev) =>
      prev.map((itm) => {
        if (itm.id === sid) {
          return {
            ...itm,
            upvalue: itm.upvalue - 1,
          };
        }
        return itm;
      })
    );
  };

  if (loading)
    return (
      <Center style={{ height: "100vh" }}>
        <Loader color="dark" size="xl" />
      </Center>
    );
  if (error)
    return (
      <Center style={{ height: "100vh" }}>
        <Text size="xl"> Someting went wrong. </Text>
      </Center>
    );

  return (
    <Container size="md">
      <SimpleGrid
        cols={3}
        spacing="xl"
        breakpoints={[
          { maxWidth: 980, cols: 3, spacing: "md" },
          { maxWidth: 755, cols: 2, spacing: "sm" },
          { maxWidth: 600, cols: 1, spacing: "sm" },
        ]}
      >
        {startups.map((itm) => (
          <StartupItem
            onClick={() => nav("/startups/" + itm.id)}
            up={up}
            upRemove={upRemove}
            {...itm}
            key={itm.id}
            upvoted={myUpvotes.includes(itm.id)}
          />
        ))}
      </SimpleGrid>
    </Container>
  );
};

export default Startups;

// Generated by https://quicktype.io

export interface StartupT {
  id: number;
  displayName: string;
  website: string;
  userId: number;
  contactEmail: string;
  shortDesc: string;
  amountRaised: string;
  ytURL: string;
  logoURL: string;
  revenue: string;
  pithPdfURL: string;
  upvalue: number;
  profit: string;
}
